// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc2877.DriveProto1.commands;

import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2877.DriveProto1.DummyPIDOutput;
import org.usfirst.frc2877.DriveProto1.Robot;
import org.usfirst.frc2877.DriveProto1.RobotMap;

/**
 *
 */
public class UtilizeThePid extends Command {

    //DummyPIDOutput theOutput = RobotMap.PIDOut;
    PIDController PIDControl = RobotMap.pIDController1;
    double prevHeading;

    public UtilizeThePid() {
        // Use requires() here to declare subsystem dependencies
        requires(Robot.driveTrain);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        //prevHeading = PIDControl.getSetpoint();
        //PIDControl.setSetpoint(prevHeading+90);
        RobotMap.gyroSubsystemGyro1.reset();
        //System.out.println("PID: Prev heading set to " + prevHeading);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        double gyroAngle = Robot.gyroSubsystem.getCurrentAngle();
        double gyroDrivePass = (90.0 - gyroAngle) / 90.0;
        if (Math.abs(gyroDrivePass) > 1.0) {
            if (gyroDrivePass > 1.0) {
                gyroDrivePass = 1.0;
            } else if (gyroDrivePass < -1.0) {
                gyroDrivePass = -1.0;
            }
        }
        
        System.out.println("GyroDrivePass = " + gyroDrivePass);
        //double output = theOutput.output;
        Robot.driveTrain.drive(gyroDrivePass, 0);
        //System.out.println("PID output: "+output);
        //System.out.print("Setpoint: " + PIDControl.getSetpoint());
        //System.out.println(", Error: " + PIDControl.getError());
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        //return PIDControl.onTarget();
        double gyroAngle = Robot.gyroSubsystem.getCurrentAngle();
        boolean isFinished = (gyroAngle > 89.0 && gyroAngle < 91.0);
        if (isFinished) {
            System.out.println("UtilizeThePid Finished");
        }
        return isFinished;
    }

    // Called once after isFinished returns true
    protected void end() {
        Robot.driveTrain.drive(0, 0);
        //PIDControl.setSetpoint(prevHeading);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}

// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc2877.DriveProto1;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; 
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.can.*;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANJaguar driveTrainLeftFrontDrive;
    public static CANJaguar driveTrainLeftRearDrive;
    public static CANJaguar driveTrainRightFrontDrive;
    public static CANJaguar driveTrainRightRearDrive;
    public static RobotDrive driveTrainRobotDrive;
    //public static Encoder encoderTesterQuadratureEncoder1;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANJaguar encoderTesterJaguar;
    public static Gyro gyroSubsystemGyro1;
    public static DoubleSolenoid pneumaticPusherPushSolenoid;
    public static Compressor pneumaticPusherPushCompressor;
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        try { 
           encoderTesterJaguar = new CANJaguar(8);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
        
        try { 
            driveTrainLeftFrontDrive = new CANJaguar(4);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            driveTrainLeftRearDrive = new CANJaguar(5);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            driveTrainRightFrontDrive = new CANJaguar(3);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            driveTrainRightRearDrive = new CANJaguar(7);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        driveTrainRobotDrive = new RobotDrive(driveTrainLeftFrontDrive, driveTrainLeftRearDrive,
              driveTrainRightFrontDrive, driveTrainRightRearDrive);
	
        driveTrainRobotDrive.setSafetyEnabled(false);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);

        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        /**encoderTesterQuadratureEncoder1 = new Encoder(1, 1, 1, 2, false, EncodingType.k4X);
	LiveWindow.addSensor("EncoderTester", "QuadratureEncoder1", encoderTesterQuadratureEncoder1);
        encoderTesterQuadratureEncoder1.setDistancePerPulse(1.0);
        encoderTesterQuadratureEncoder1.setPIDSourceParameter(Encoder.PIDSourceParameter.kRate);
        encoderTesterQuadratureEncoder1.start();
        */

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    gyroSubsystemGyro1 = new Gyro(1, 1);
    LiveWindow.addSensor("GyroSubsystem", "Gyro1", gyroSubsystemGyro1);
    gyroSubsystemGyro1.setSensitivity(0.007);
    pneumaticPusherPushSolenoid = new DoubleSolenoid(1, 1, 2);
    pneumaticPusherPushCompressor = new Compressor(1, 1, 1, 1);
    pneumaticPusherPushCompressor.start();
    }
}
